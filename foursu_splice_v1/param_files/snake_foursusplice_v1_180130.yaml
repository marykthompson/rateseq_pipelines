import os

#http://snakemake.readthedocs.io/en/stable/project_info/faq.html#how-do-i-run-my-rule-on-all-files-of-a-certain-directory
#http://snakemake.readthedocs.io/en/stable/tutorial/advanced.html
#-> explains wildcards and how to use in conjunction with the config.yaml file
#version 13 I will try to incorporate running the R_script (and changing to the tigeR1 environment)
#version 14 I will try to incorporate the downstream data summarization after running the Rscript, including reproducibility scatter plots
#version 19 I'm incorporating rRNA contam report for each library
#version 20, direct stdout to logfile
#version 21, mark files to remove as temporary
#snakerun_indev3: split pipeline into both keeping and discarding the intron mapping reads
##now trying to get it to run for the Quant-seq libraries
#indev4: split the plusI minusI downstream part into separate directories
#indev5: add one version where tpms are combined by gene from the transcript mapping to see how much more reproducible it is
#indev7 macbook: try to get test pipeline to run on macbook


configfile: "config_foursusplice_v1_180130.yaml"

#files and directories
rootdir = config["rootdir"]
outdir = os.path.join(rootdir, config["outdir"])
seqdir = os.path.join(rootdir, config["seqdir"])
scripts_dir = os.path.join(rootdir, config["scripts_dir"])
rRNA_index = os.path.join(rootdir, config["rRNA_index"])
salmon_index = os.path.join(rootdir, config["salmon_index"])
intronless_file = os.path.join(rootdir, config["intronless_file"])
rRNA_txt_table = os.path.join(rootdir, config["rRNA_txt_table"])
txt_2_gene_pickle = os.path.join(rootdir, config["txt_2_gene_pickle"])
annotation_db = os.path.join(rootdir, config["annotation_db"])
logfile = os.path.join(outdir, 'logs', 'pipeline_log.log')

#sample names and grouping
sample_dict = config["samples"]
rep_dict = config["replicates"]

#parameters
mates = config["mates"]
bowtie_mates = config["bowtie_mates"]
min_read_type = config['min_read_type']
min_reads = config['min_reads']
labelling_hrs = config['labelling_hrs']
deg_during_pulse = config['deg_during_pulse']

#conda environments needed
ENV_PY = 'source activate %s' % config['python3_environment']
ENV_R = 'source activate %s' % config['R_environment']
DEACTIVATE = 'source %s' % config['deactivate_cmd']

rule targets:
    input:
        os.path.join(outdir, "rates_inspect/byGene/minusI/reproducibility/filtering_summary.csv"),
        os.path.join(outdir, "rates_inspect/byGene/plusI/reproducibility/filtering_summary.csv"),
        os.path.join(outdir, "rates_inspect/byTxt/minusI/reproducibility/filtering_summary.csv"),
        os.path.join(outdir, "rates_inspect/byTxt/plusI/reproducibility/filtering_summary.csv"),
        os.path.join(outdir, "rRNA_contam/rRNA_contamination_summary.csv"),
        #expand(os.path.join(outdir,"counting_transcripts/{sample}_transcripts_quant/quant.sf"), sample = sample_dict),
        #expand(os.path.join(outdir, "rates_inspect/byTxt/plusI/inspect_synthesis_r{rep}.csv"), rep = rep_dict),
        #expand(os.path.join(outdir, "rates_inspect/byTxt/plusI/inspect_decay_r{rep}.csv"), rep = rep_dict),
        #expand(os.path.join(outdir, "rates_inspect/byTxt/plusI/inspect_processing_r{rep}.csv"), rep = rep_dict),
        #os.path.join(outdir, "rates_inspect/byGene/plusI/inspect_data_full.csv"),
        #os.path.join(outdir, "rates_inspect/byGene/plusI/inspect_data_summary.csv"),
        #os.path.join(outdir, "rates_inspect/byGene/minusI/inspect_data_full.csv"),
        #os.path.join(outdir, "rates_inspect/byGene/minusI/inspect_data_summary.csv")
        ## I think first 5 targets should be sufficient to run the whole pipeline

rule bam_to_fq:
    input:
        lambda x: os.path.join(seqdir, sample_dict[x.sample]) ##also works and now you can specify dir
    output:
        expand(os.path.join(outdir,"intermediates/{{sample}}.{mate}.fq"), mate = mates)
    log: logfile
    run:
        shell("samtools fastq {input} -1 {output[0]} -2 {output[1]} 2>> {log}")

rule R1_trim:
    input:
        os.path.join(outdir, "intermediates/{sample}.R1.fq")
    output:
        os.path.join(outdir, "intermediates/{sample}.R1_trimmed.fq.gz")
    log: logfile
    run:
        shell("cutadapt -u 9 -o {output} {input}")

rule R2_trim:
    input:
        os.path.join(outdir, "intermediates/{sample}.R2.fq")
    output:
        os.path.join(outdir, "intermediates/{sample}.R2_trimmed.fq.gz")
    log: logfile
    run:
        shell("cutadapt -u 6 -o {output} {input}")

rule rRNA_map:
    input:
        expand(os.path.join(outdir,"intermediates/{{sample}}.{mate}_trimmed.fq.gz"), mate = mates)
    params:
        aligned_prefix=os.path.join(outdir,"intermediates/{sample}.rRNA_al.fq.gz"),
        unaligned_prefix=os.path.join(outdir,"intermediates/{sample}.rRNA_un.fq.gz")
    output:
        expand(os.path.join(outdir,"intermediates/{{sample}}.rRNA_un.fq.{bowtie_mate}.gz"), bowtie_mate = bowtie_mates),
        expand(os.path.join(outdir,"intermediates/{{sample}}.rRNA_al.fq.{bowtie_mate}.gz"), bowtie_mate = bowtie_mates),
        expand(os.path.join(outdir, "intermediates/rRNA/{{sample}}.sam"))

    log: logfile
    run:
        shell("bowtie2 -x %s -1 {input[0]} -2 {input[1]} --al-conc-gz {params.aligned_prefix} --un-conc-gz {params.unaligned_prefix} -S %s 2>> {log}" % (rRNA_index, "{output[4]}"))

rule salmon_map:
    input:
        expand(os.path.join(outdir,"intermediates/{{sample}}.rRNA_un.fq.{bowtie_mate}.gz"), bowtie_mate = bowtie_mates)
    params:
        salmon_outdir=os.path.join(outdir,"counting_transcripts/{sample}_transcripts_quant/")
    output:
        os.path.join(outdir,"counting_transcripts/{sample}_transcripts_quant/quant.sf")
    log: logfile
    run:
        shell("salmon quant -i %s -l ISR -1 {input[0]} -2 {input[1]} -o {params.salmon_outdir} 2>> {log}" % salmon_index)

rule prepare_count_table:
    input:
        lambda x: expand(os.path.join(outdir,"counting_transcripts/{sample}_transcripts_quant/quant.sf"), sample = rep_dict[x.rep])
    params:
        byTxt_plusI_synthesis_file = lambda x: os.path.join(outdir,"rates_inspect/byTxt/plusI/inspect_synthesis_r%s.csv" % x.rep),
        byTxt_plusI_decay_file = lambda x: os.path.join(outdir,"rates_inspect/byTxt/plusI/inspect_decay_r%s.csv" % x.rep),
        byTxt_plusI_processing_file = lambda x: os.path.join(outdir,"rates_inspect/byTxt/plusI/inspect_processing_r%s.csv" % x.rep),
        byTxt_minusI_synthesis_file = lambda x: os.path.join(outdir,"rates_inspect/byTxt/minusI/inspect_synthesis_r%s.csv" % x.rep),
        byTxt_minusI_decay_file = lambda x: os.path.join(outdir,"rates_inspect/byTxt/minusI/inspect_decay_r%s.csv" % x.rep),
        byTxt_minusI_processing_file = lambda x: os.path.join(outdir,"rates_inspect/byTxt/minusI/inspect_processing_r%s.csv" % x.rep),

        byGene_plusI_synthesis_file = lambda x: os.path.join(outdir,"rates_inspect/byGene/plusI/inspect_synthesis_r%s.csv" % x.rep),
        byGene_plusI_decay_file = lambda x: os.path.join(outdir,"rates_inspect/byGene/plusI/inspect_decay_r%s.csv" % x.rep),
        byGene_plusI_processing_file = lambda x: os.path.join(outdir,"rates_inspect/byGene/plusI/inspect_processing_r%s.csv" % x.rep),
        byGene_minusI_synthesis_file = lambda x: os.path.join(outdir,"rates_inspect/byGene/minusI/inspect_synthesis_r%s.csv" % x.rep),
        byGene_minusI_decay_file = lambda x: os.path.join(outdir,"rates_inspect/byGene/minusI/inspect_decay_r%s.csv" % x.rep),
        byGene_minusI_processing_file = lambda x: os.path.join(outdir,"rates_inspect/byGene/minusI/inspect_processing_r%s.csv" % x.rep),

        labelling_hrs = labelling_hrs,
        deg_during_pulse = deg_during_pulse,
        intronless_file = intronless_file,
        txt_2_gene_pickle = txt_2_gene_pickle
        #rscript = lambda x: os.path.join(outdir,"rates_inspect/inspect_r%s.R" % x.rep),

    output:
        byTxt_plusI_total_exons_file = os.path.join(outdir,"rates_inspect/byTxt/plusI/total_exons_r{rep}.txt"),
        byTxt_plusI_total_introns_file = os.path.join(outdir,"rates_inspect/byTxt/plusI/total_introns_r{rep}.txt"),
        byTxt_plusI_foursu_exons_file = os.path.join(outdir,"rates_inspect/byTxt/plusI/foursu_exons_r{rep}.txt"),
        byTxt_plusI_foursu_introns_file = os.path.join(outdir,"rates_inspect/byTxt/plusI/foursu_introns_r{rep}.txt"),
        byTxt_minusI_total_exons_file = os.path.join(outdir,"rates_inspect/byTxt/minusI/total_exons_r{rep}.txt"),
        byTxt_minusI_total_introns_file = os.path.join(outdir,"rates_inspect/byTxt/minusI/total_introns_r{rep}.txt"),
        byTxt_minusI_foursu_exons_file = os.path.join(outdir,"rates_inspect/byTxt/minusI/foursu_exons_r{rep}.txt"),
        byTxt_minusI_foursu_introns_file = os.path.join(outdir,"rates_inspect/byTxt/minusI/foursu_introns_r{rep}.txt"),

        byGene_plusI_total_exons_file = os.path.join(outdir,"rates_inspect/byGene/plusI/total_exons_r{rep}.txt"),
        byGene_plusI_total_introns_file = os.path.join(outdir,"rates_inspect/byGene/plusI/total_introns_r{rep}.txt"),
        byGene_plusI_foursu_exons_file = os.path.join(outdir,"rates_inspect/byGene/plusI/foursu_exons_r{rep}.txt"),
        byGene_plusI_foursu_introns_file = os.path.join(outdir,"rates_inspect/byGene/plusI/foursu_introns_r{rep}.txt"),
        byGene_minusI_total_exons_file = os.path.join(outdir,"rates_inspect/byGene/minusI/total_exons_r{rep}.txt"),
        byGene_minusI_total_introns_file = os.path.join(outdir,"rates_inspect/byGene/minusI/total_introns_r{rep}.txt"),
        byGene_minusI_foursu_exons_file = os.path.join(outdir,"rates_inspect/byGene/minusI/foursu_exons_r{rep}.txt"),
        byGene_minusI_foursu_introns_file = os.path.join(outdir,"rates_inspect/byGene/minusI/foursu_introns_r{rep}.txt"),

        byTxt_plusI_rscript = os.path.join(outdir,"rates_inspect/byTxt/plusI/inspect_r{rep}.R"),
        byTxt_minusI_rscript = os.path.join(outdir,"rates_inspect/byTxt/minusI/inspect_r{rep}.R"),

        byGene_plusI_rscript = os.path.join(outdir,"rates_inspect/byGene/plusI/inspect_r{rep}.R"),
        byGene_minusI_rscript = os.path.join(outdir,"rates_inspect/byGene/minusI/inspect_r{rep}.R")

    log: logfile
    script:
        os.path.join(scripts_dir, "prepare_count_tables.py")

rule run_inspect:
    input:
        os.path.join(outdir,"rates_inspect/byTxt/plusI/inspect_r{rep}.R"),
        os.path.join(outdir,"rates_inspect/byTxt/minusI/inspect_r{rep}.R"),
        os.path.join(outdir,"rates_inspect/byGene/plusI/inspect_r{rep}.R"),
        os.path.join(outdir,"rates_inspect/byGene/minusI/inspect_r{rep}.R")

    output:
        os.path.join(outdir,"rates_inspect/byTxt/plusI/inspect_synthesis_r{rep}.csv"),
        os.path.join(outdir,"rates_inspect/byTxt/plusI/inspect_decay_r{rep}.csv"),
        os.path.join(outdir, "rates_inspect/byTxt/plusI/inspect_processing_r{rep}.csv"),
        os.path.join(outdir,"rates_inspect/byTxt/minusI/inspect_synthesis_r{rep}.csv"),
        os.path.join(outdir,"rates_inspect/byTxt/minusI/inspect_decay_r{rep}.csv"),
        os.path.join(outdir, "rates_inspect/byTxt/minusI/inspect_processing_r{rep}.csv"),
        os.path.join(outdir,"rates_inspect/byGene/plusI/inspect_synthesis_r{rep}.csv"),
        os.path.join(outdir,"rates_inspect/byGene/plusI/inspect_decay_r{rep}.csv"),
        os.path.join(outdir, "rates_inspect/byGene/plusI/inspect_processing_r{rep}.csv"),
        os.path.join(outdir,"rates_inspect/byGene/minusI/inspect_synthesis_r{rep}.csv"),
        os.path.join(outdir,"rates_inspect/byGene/minusI/inspect_decay_r{rep}.csv"),
        os.path.join(outdir, "rates_inspect/byGene/minusI/inspect_processing_r{rep}.csv")

    log: logfile
    shell:
        """
        set +u
        {DEACTIVATE}
        {ENV_R}
        conda env list
        Rscript {input[0]}
        Rscript {input[1]}
        Rscript {input[2]}
        Rscript {input[3]}
        {ENV_PY}
        set -u
        """

rule filter_and_summarize_byGene_plusI:
    input:
        foursu_exons_files = expand(os.path.join(outdir,"rates_inspect/byGene/plusI/foursu_exons_r{rep}.txt"), rep = rep_dict),
        foursu_introns_files = expand(os.path.join(outdir,"rates_inspect/byGene/plusI/foursu_introns_r{rep}.txt"), rep = rep_dict),
        total_exons_files = expand(os.path.join(outdir,"rates_inspect/byGene/plusI/total_exons_r{rep}.txt"), rep = rep_dict),
        total_introns_files = expand(os.path.join(outdir,"rates_inspect/byGene/plusI/total_introns_r{rep}.txt"), rep = rep_dict),
        synthesis_files = expand(os.path.join(outdir,"rates_inspect/byGene/plusI/inspect_synthesis_r{rep}.csv"), rep = rep_dict),
        decay_files = expand(os.path.join(outdir,"rates_inspect/byGene/plusI/inspect_decay_r{rep}.csv"), rep = rep_dict),
        processing_files = expand(os.path.join(outdir,"rates_inspect/byGene/plusI/inspect_processing_r{rep}.csv"), rep = rep_dict)
    params:
        min_read_type = min_read_type,
        min_reads = min_reads,
        filtering_outdir = os.path.join(outdir, "rates_inspect/byGene/plusI/filtered_genes/"),
        annotation_db = annotation_db
    output:
        all_data_file = os.path.join(outdir, "rates_inspect/byGene/plusI/inspect_data_full.csv"),
        summary_data_file = os.path.join(outdir, "rates_inspect/byGene/plusI/inspect_data_summary.csv")
    log: logfile
    script:
        os.path.join(scripts_dir, "summarize_rates.py")

rule filter_and_summarize_byTxt_plusI:
    input:
        foursu_exons_files = expand(os.path.join(outdir,"rates_inspect/byTxt/plusI/foursu_exons_r{rep}.txt"), rep = rep_dict),
        foursu_introns_files = expand(os.path.join(outdir,"rates_inspect/byTxt/plusI/foursu_introns_r{rep}.txt"), rep = rep_dict),
        total_exons_files = expand(os.path.join(outdir,"rates_inspect/byTxt/plusI/total_exons_r{rep}.txt"), rep = rep_dict),
        total_introns_files = expand(os.path.join(outdir,"rates_inspect/byTxt/plusI/total_introns_r{rep}.txt"), rep = rep_dict),
        synthesis_files = expand(os.path.join(outdir,"rates_inspect/byTxt/plusI/inspect_synthesis_r{rep}.csv"), rep = rep_dict),
        decay_files = expand(os.path.join(outdir,"rates_inspect/byTxt/plusI/inspect_decay_r{rep}.csv"), rep = rep_dict),
        processing_files = expand(os.path.join(outdir,"rates_inspect/byTxt/plusI/inspect_processing_r{rep}.csv"), rep = rep_dict)
    params:
        min_read_type = min_read_type,
        min_reads = min_reads,
        filtering_outdir = os.path.join(outdir, "rates_inspect/byTxt/plusI/filtered_genes/"),
        annotation_db = annotation_db
    output:
        all_data_file = os.path.join(outdir, "rates_inspect/byTxt/plusI/inspect_data_full.csv"),
        summary_data_file = os.path.join(outdir, "rates_inspect/byTxt/plusI/inspect_data_summary.csv")
    log: logfile
    script:
        os.path.join(scripts_dir, "summarize_rates.py")

rule filter_and_summarize_byGene_minusI:
    input:
        foursu_exons_files = expand(os.path.join(outdir,"rates_inspect/byGene/minusI/foursu_exons_r{rep}.txt"), rep = rep_dict),
        foursu_introns_files = expand(os.path.join(outdir,"rates_inspect/byGene/minusI/foursu_introns_r{rep}.txt"), rep = rep_dict),
        total_exons_files = expand(os.path.join(outdir,"rates_inspect/byGene/minusI/total_exons_r{rep}.txt"), rep = rep_dict),
        total_introns_files = expand(os.path.join(outdir,"rates_inspect/byGene/minusI/total_introns_r{rep}.txt"), rep = rep_dict),
        synthesis_files = expand(os.path.join(outdir,"rates_inspect/byGene/minusI/inspect_synthesis_r{rep}.csv"), rep = rep_dict),
        decay_files = expand(os.path.join(outdir,"rates_inspect/byGene/minusI/inspect_decay_r{rep}.csv"), rep = rep_dict),
        processing_files = expand(os.path.join(outdir,"rates_inspect/byGene/minusI/inspect_processing_r{rep}.csv"), rep = rep_dict)
    params:
        min_read_type = min_read_type,
        min_reads = min_reads,
        filtering_outdir = os.path.join(outdir, "rates_inspect/byGene/minusI/filtered_genes/"),
        annotation_db = annotation_db
    output:
        all_data_file = os.path.join(outdir, "rates_inspect/byGene/minusI/inspect_data_full.csv"),
        summary_data_file = os.path.join(outdir, "rates_inspect/byGene/minusI/inspect_data_summary.csv")
    log: logfile
    script:
        os.path.join(scripts_dir, "summarize_rates.py")

rule filter_and_summarize_byTxt_minusI:
    input:
        foursu_exons_files = expand(os.path.join(outdir,"rates_inspect/byTxt/minusI/foursu_exons_r{rep}.txt"), rep = rep_dict),
        foursu_introns_files = expand(os.path.join(outdir,"rates_inspect/byTxt/minusI/foursu_introns_r{rep}.txt"), rep = rep_dict),
        total_exons_files = expand(os.path.join(outdir,"rates_inspect/byTxt/minusI/total_exons_r{rep}.txt"), rep = rep_dict),
        total_introns_files = expand(os.path.join(outdir,"rates_inspect/byTxt/minusI/total_introns_r{rep}.txt"), rep = rep_dict),
        synthesis_files = expand(os.path.join(outdir,"rates_inspect/byTxt/minusI/inspect_synthesis_r{rep}.csv"), rep = rep_dict),
        decay_files = expand(os.path.join(outdir,"rates_inspect/byTxt/minusI/inspect_decay_r{rep}.csv"), rep = rep_dict),
        processing_files = expand(os.path.join(outdir,"rates_inspect/byTxt/minusI/inspect_processing_r{rep}.csv"), rep = rep_dict)
    params:
        min_read_type = min_read_type,
        min_reads = min_reads,
        filtering_outdir = os.path.join(outdir, "rates_inspect/byTxt/minusI/filtered_genes/"),
        annotation_db = annotation_db
    output:
        all_data_file = os.path.join(outdir, "rates_inspect/byTxt/minusI/inspect_data_full.csv"),
        summary_data_file = os.path.join(outdir, "rates_inspect/byTxt/minusI/inspect_data_summary.csv")
    log: logfile
    script:
        os.path.join(scripts_dir, "summarize_rates.py")

rule plot_reproducibility_byGene_plusI:
    input:
        all_data_file = os.path.join(outdir, "rates_inspect/byGene/plusI/inspect_data_full.csv")
    params:
        plot_dir = os.path.join(outdir, "rates_inspect/byGene/plusI/reproducibility/"),
        genelist_dir = os.path.join(outdir, "rates_inspect/byGene/plusI/filtered_genes/"),
        min_read_type = min_read_type,
        min_reads = min_reads
    output:
        os.path.join(outdir, "rates_inspect/byGene/plusI/reproducibility/filtering_summary.csv")
    log: logfile
    script:
        os.path.join(scripts_dir, "plot_reproducibility.py")

rule plot_reproducibility_byTxt_plusI:
    input:
        all_data_file = os.path.join(outdir, "rates_inspect/byTxt/plusI/inspect_data_full.csv")
    params:
        plot_dir = os.path.join(outdir, "rates_inspect/byTxt/plusI/reproducibility/"),
        genelist_dir = os.path.join(outdir, "rates_inspect/byTxt/plusI/filtered_genes/"),
        min_read_type = min_read_type,
        min_reads = min_reads
    output:
        os.path.join(outdir, "rates_inspect/byTxt/plusI/reproducibility/filtering_summary.csv")
    log: logfile
    script:
        os.path.join(scripts_dir, "plot_reproducibility.py")

rule plot_reproducibility_byGene_minusI:
    input:
        all_data_file = os.path.join(outdir, "rates_inspect/byGene/minusI/inspect_data_full.csv")
    params:
        plot_dir = os.path.join(outdir, "rates_inspect/byGene/minusI/reproducibility/"),
        genelist_dir = os.path.join(outdir, "rates_inspect/byGene/minusI/filtered_genes/"),
        min_read_type = min_read_type,
        min_reads = min_reads
    output:
        os.path.join(outdir, "rates_inspect/byGene/minusI/reproducibility/filtering_summary.csv")
    log: logfile
    script:
        os.path.join(scripts_dir, "plot_reproducibility.py")

rule plot_reproducibility_byTxt_minusI:
    input:
        all_data_file = os.path.join(outdir, "rates_inspect/byTxt/minusI/inspect_data_full.csv")
    params:
        plot_dir = os.path.join(outdir, "rates_inspect/byTxt/minusI/reproducibility/"),
        genelist_dir = os.path.join(outdir, "rates_inspect/byTxt/minusI/filtered_genes/"),
        min_read_type = min_read_type,
        min_reads = min_reads
    output:
        os.path.join(outdir, "rates_inspect/byTxt/minusI/reproducibility/filtering_summary.csv")
    log: logfile
    script:
        os.path.join(scripts_dir, "plot_reproducibility.py")


rule plot_rRNA_contam:
    input:
        rRNA_mapping_files = expand(os.path.join(outdir, "intermediates/rRNA/{sample}.sam"), sample = sample_dict),
        rRNA_txt_table = rRNA_txt_table
    params:
        rRNA_outdir = os.path.join(outdir, "rRNA_contam")
    output:
        os.path.join(outdir, "rRNA_contam/rRNA_contamination_summary.csv")
    log: logfile
    script:
        os.path.join(scripts_dir, "plot_rRNA_contam.py")
